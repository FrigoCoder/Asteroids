
Introduction

    Links

        The Mercurial repository of the project is hosted at https://bitbucket.org/FrigoCoder/asteroids/

        The Continuous Integration server is found at http://frigocoder.dyndns.org/jenkins/job/asteroids/

        A demo Applet can be found at http://frigocoder.dyndns.org/asteroids/
        <make sure it works>

    Thesis Foreword

        This project demonstrates the use of modern Software Engineering principles, techniques and tools, with an emphasis on Entity Component Systems, in the development of simple two dimensional games, specifically a variation of the popular classic Asteroids.

        Modern Software Engineering principles and techniques:
            - Object Oriented Programming (OOP)
            - Integrated Development Environments (IDE)
            - Clean Code & Test Driven Development (TDD)
            - Mock Objects
            - Distributed Revision Control
            - Build Automation Software
            - Continuous Integration (CI)
            - Software Quality Control
            - Issue Tracking Systems
            - Entity Component System (ECS)

        Corresponding Software Engineering Tools:
            - Java
            - Eclipse
            - Junit
            - Mockito
            - Mercurial
            - Gradle
            - Jenkins
            - SonarQube
            - JIRA

    Explanation of used Software Engineering principles, techniques and tools

        <insert some words about these techniques>

        <insert technikai megfontolások, döntések>

        <insert terminology>

        <might be better in the developer documentation>

    Goal of the project

        <todo>

    Target audience

        <todo>

    Project life cycle
        - initial ideas
        - design
        - implementation
        - extension
        - testing
        - deployment
        - maintenance
        - end of life

        <todo>

    Licensing

        I hereby release this project and all of its components into the public domain.

User Documentation

    System requirements

        The software requires an OpenGL 2.0 compatible video card with installed drivers for proper display capabilities and a keyboard for player input. These requirements are most likely fulfilled by current Personal Computers. Unfortunately the game in its current state does not support Android or iOS based mobile devices.

        Since the project is based on Java and multiplatform libraries, it should have no problem with running on a wide range of operating systems like Windows or Linux. However only Windows and Linux is supported officially at the moment.

        The computer should have a Java 1.7 Runtime Environment installed. This is usually available on most computers, but in case it is not installed or is outdated, please download and install it from http://java.com/en

    Backstory

    Basics

        The player controls a spaceship tasked with clearing the asteroid debris in a solar system. The game uses realistic two dimensional physics. The player can only control the movement of the spaceship in a restricted manner. Forward thrust is achieved by the forward arrow on the keyboard. Angular acceleration, rather than angular velocity, is influenced by the left and right arrows. The spaceship can also shoot bullets, in order to achieve this, the player has to press the space button. The player should spend some time familiarizing himself with the controls, the realistic physics makes the control non-trivial, especially in the presence of gravitational wells.

    Screenshots


Developer Documentation
